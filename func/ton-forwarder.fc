;; Contract that accepts exact sum and forwards it to specified address
;; On wrong amount or subsequent returns money

(int, int, int, slice, int) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(1),    ;; is_complete 1
    ds~load_uint(32),   ;; created_at 32
    ds~load_uint(64),   ;; query_id 64
    ds~load_msg_addr(), ;; forward_address 267
    ds~load_coins()     ;; wanted_amount 127
  );
}

() save_data(int is_complete, int created_at, int query_id, slice forward_address, int wanted_amount) impure inline {
  set_data(
    begin_cell()
      .store_uint(is_complete, 1)
      .store_uint(created_at, 32)
      .store_uint(query_id, 64)
      .store_slice(forward_address)
      .store_coins(wanted_amount)
      .end_cell()
  );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  var (
    is_complete,
    created_at,
    query_id,
    forward_address,
    wanted_amount
  ) = load_data();

  if ((is_complete == 1) | (msg_value != wanted_amount)) {
    slice sender_address = cs~load_msg_addr();
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; nobounce
      .store_slice(sender_address)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell();

    send_raw_message(msg, 64);
    return ();
  }

  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce
    .store_slice(forward_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0, 32)
    .store_uint(query_id, 64)
    .end_cell();

  send_raw_message(msg, 64);
  save_data(1, created_at, query_id, forward_address, wanted_amount);
  return ();
}

() recv_external(slice in_msg) impure {
  ;; do nothing for external messages
}